// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PARTICIPANT
  ORGANIZER
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String
  password      String
  role          Role           @default(PARTICIPANT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  competitions  Competition[]
  registrations Registration[]
  mailbox       MailBox[]

  @@index([email])
  @@map("users")
}

model Competition {
  id            String         @id @default(uuid())
  title         String
  description   String         @db.Text
  tags          String[]
  capacity      Int
  seatsLeft     Int
  regDeadline   DateTime
  startDate     DateTime?
  organizerId   String
  version       Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  organizer     User           @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  registrations Registration[]

  @@index([organizerId])
  @@index([regDeadline])
  @@index([startDate])
  @@map("competitions")
}

model Registration {
  id             String             @id @default(uuid())
  userId         String
  competitionId  String
  status         RegistrationStatus @default(PENDING)
  idempotencyKey String?            @unique
  registeredAt   DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  competition    Competition        @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@unique([userId, competitionId])
  @@index([competitionId, status])
  @@index([userId])
  @@map("registrations")
}

model MailBox {
  id        String   @id @default(uuid())
  userId    String
  to        String
  subject   String
  body      String   @db.Text
  sentAt    DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sentAt])
  @@map("mailbox")
}

model IdempotencyLog {
  key       String   @id
  response  Json
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
  @@map("idempotency_logs")
}

model FailedJob {
  id        String   @id @default(uuid())
  jobId     String
  queue     String
  payload   Json
  error     String   @db.Text
  attempts  Int
  failedAt  DateTime @default(now())

  @@index([queue])
  @@index([failedAt])
  @@map("failed_jobs")
}