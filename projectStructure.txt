# Mini Compete - Complete Project Structure

```
mini-compete/
├── apps/
│   ├── backend/
│   │   ├── src/
│   │   │   ├── auth/
│   │   │   │   ├── auth.controller.ts
│   │   │   │   ├── auth.service.ts
│   │   │   │   ├── auth.module.ts
│   │   │   │   ├── dto/
│   │   │   │   │   ├── signup.dto.ts
│   │   │   │   │   └── login.dto.ts
│   │   │   │   ├── guards/
│   │   │   │   │   ├── jwt-auth.guard.ts
│   │   │   │   │   └── roles.guard.ts
│   │   │   │   ├── decorators/
│   │   │   │   │   ├── current-user.decorator.ts
│   │   │   │   │   └── roles.decorator.ts
│   │   │   │   └── strategies/
│   │   │   │       └── jwt.strategy.ts
│   │   │   ├── competitions/
│   │   │   │   ├── competitions.controller.ts
│   │   │   │   ├── competitions.service.ts
│   │   │   │   ├── competitions.module.ts
│   │   │   │   └── dto/
│   │   │   │       ├── create-competition.dto.ts
│   │   │   │       └── register-competition.dto.ts
│   │   │   ├── registrations/
│   │   │   │   ├── registrations.controller.ts
│   │   │   │   ├── registrations.service.ts
│   │   │   │   └── registrations.module.ts
│   │   │   ├── queue/
│   │   │   │   ├── queue.module.ts
│   │   │   │   ├── processors/
│   │   │   │   │   ├── registration.processor.ts
│   │   │   │   │   └── reminder.processor.ts
│   │   │   │   └── services/
│   │   │   │       └── queue.service.ts
│   │   │   ├── cron/
│   │   │   │   ├── cron.module.ts
│   │   │   │   └── cron.service.ts
│   │   │   ├── prisma/
│   │   │   │   ├── prisma.module.ts
│   │   │   │   ├── prisma.service.ts
│   │   │   │   ├── schema.prisma
│   │   │   │   ├── migrations/
│   │   │   │   └── seed.ts
│   │   │   ├── common/
│   │   │   │   ├── filters/
│   │   │   │   │   └── http-exception.filter.ts
│   │   │   │   ├── interceptors/
│   │   │   │   │   └── logging.interceptor.ts
│   │   │   │   └── middleware/
│   │   │   │       └── idempotency.middleware.ts
│   │   │   ├── config/
│   │   │   │   └── configuration.ts
│   │   │   ├── app.module.ts
│   │   │   ├── app.controller.ts
│   │   │   ├── app.service.ts
│   │   │   └── main.ts
│   │   ├── test/
│   │   │   ├── app.e2e-spec.ts
│   │   │   └── jest-e2e.json
│   │   ├── .env.example
│   │   ├── .eslintrc.js
│   │   ├── .prettierrc
│   │   ├── nest-cli.json
│   │   ├── package.json
│   │   ├── tsconfig.json
│   │   └── tsconfig.build.json
│   │
│   └── frontend/
│       ├── src/
│       │   ├── app/
│       │   │   ├── page.tsx
│       │   │   ├── layout.tsx
│       │   │   ├── auth/
│       │   │   │   ├── login/
│       │   │   │   │   └── page.tsx
│       │   │   │   └── signup/
│       │   │   │       └── page.tsx
│       │   │   ├── competitions/
│       │   │   │   ├── page.tsx
│       │   │   │   ├── create/
│       │   │   │   │   └── page.tsx
│       │   │   │   └── [id]/
│       │   │   │       └── page.tsx
│       │   │   ├── dashboard/
│       │   │   │   └── page.tsx
│       │   │   └── mailbox/
│       │   │       └── page.tsx
│       │   ├── components/
│       │   │   ├── Header.tsx
│       │   │   ├── CompetitionCard.tsx
│       │   │   └── ProtectedRoute.tsx
│       │   ├── lib/
│       │   │   ├── api.ts
│       │   │   └── auth.ts
│       │   └── types/
│       │       └── index.ts
│       ├── public/
│       ├── .env.example
│       ├── .eslintrc.json
│       ├── next.config.js
│       ├── package.json
│       ├── tsconfig.json
│       └── tailwind.config.js
│
├── packages/
│   └── shared/
│       ├── src/
│       │   └── types/
│       │       └── index.ts
│       ├── package.json
│       └── tsconfig.json
│
├── docker/
│   ├── backend/
│   │   └── Dockerfile
│   ├── frontend/
│   │   └── Dockerfile
│   └── worker/
│       └── Dockerfile
│
├── .github/
│   └── workflows/
│       └── ci.yml
│
├── docker-compose.yml
├── docker-compose.dev.yml
├── .env.example
├── .gitignore
├── turbo.json
├── package.json
├── README.md
├── ARCHITECTURE.md
└── postman/
    └── mini-compete.postman_collection.json
```

## Key Architectural Decisions

### 1. **Monorepo Structure (Turborepo)**
- Enables code sharing between frontend/backend
- Optimized builds with caching
- Shared TypeScript types package

### 2. **Backend Architecture (NestJS)**
- **Modular Design**: Separate modules for auth, competitions, registrations, queue, cron
- **Prisma ORM**: Type-safe database access with migrations
- **BullMQ**: Redis-based queue for background jobs
- **JWT Authentication**: Stateless auth with role-based access control

### 3. **Concurrency & Idempotency**
- **Database Transactions**: SERIALIZABLE isolation for seat allocation
- **Row-Level Locking**: Prevents overselling under concurrent requests
- **Idempotency Middleware**: Header-based idempotency using Redis cache
- **Optimistic Locking**: Version field in critical tables

### 4. **Worker System**
- **Separate Processor**: Handles confirmation and reminder jobs
- **Retry Strategy**: Exponential backoff (3 attempts)
- **Dead Letter Queue**: Failed jobs moved to DLQ after max retries
- **Job Persistence**: Redis persists jobs across restarts

### 5. **Cron Jobs**
- **Scheduled Tasks**: Daily reminder for competitions starting in 24h
- **Bulk Processing**: Enqueues jobs in batches
- **Cleanup Tasks**: Purges old data periodically

### 6. **Database Schema**
```prisma
model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String
  password      String
  role          Role            @default(PARTICIPANT)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  competitions  Competition[]
  registrations Registration[]
  mailbox       MailBox[]
}

model Competition {
  id           String          @id @default(uuid())
  title        String
  description  String
  tags         String[]
  capacity     Int
  seatsLeft    Int
  regDeadline  DateTime
  startDate    DateTime?
  organizerId  String
  organizer    User            @relation(fields: [organizerId], references: [id])
  registrations Registration[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  version      Int             @default(0)
}

model Registration {
  id             String      @id @default(uuid())
  userId         String
  competitionId  String
  status         RegStatus   @default(PENDING)
  idempotencyKey String?     @unique
  user           User        @relation(fields: [userId], references: [id])
  competition    Competition @relation(fields: [competitionId], references: [id])
  registeredAt   DateTime    @default(now())
  
  @@unique([userId, competitionId])
  @@index([competitionId, status])
}

model MailBox {
  id        String   @id @default(uuid())
  userId    String
  to        String
  subject   String
  body      String
  sentAt    DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model IdempotencyLog {
  key       String   @id
  response  Json
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model FailedJob {
  id        String   @id @default(uuid())
  jobId     String
  queue     String
  payload   Json
  error     String
  attempts  Int
  failedAt  DateTime @default(now())
}
```

### 7. **Frontend (Next.js 14)**
- **App Router**: Modern Next.js routing
- **Server Components**: Optimized rendering
- **Client-side State**: React Context for auth
- **Tailwind CSS**: Utility-first styling

## Next Steps
I'll now implement each component systematically:
1. Root configuration files
2. Backend implementation
3. Frontend implementation
4. Docker setup
5. Documentation










How to Run
Option 1: Docker (Fastest)
bashgit clone <repo>
cd mini-compete
./setup.sh  # Choose option 1
Option 2: Local Development
bashyarn install
make dev-services
make migrate && make seed
make dev
Access at:

Frontend: http://localhost:3000
Backend: http://localhost:3001
API Docs: http://localhost:3001/api/docs

Test Credentials

Participant: participant1@minicompete.com / password123
Organizer: organizer1@minicompete.com / password123

Production Ready ✅

Docker containerization
Environment configuration
Database migrations
Health checks
Error handling
Security (JWT, bcrypt, CORS)
Monitoring ready
CI/CD pipeline

This is a complete, production-level implementation ready for deployment or further development!